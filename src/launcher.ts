import { Bot } from "./baseBot/index.js";
import { readFile } from 'node:fs/promises';
import { DB } from "./db.js";
import { SchApi } from "./api.js";
import { Logger } from "./logger.js";
import { MsgAnalyser } from "./baseBot/msgAnalyser/index.js";
import { scheduleJob } from "node-schedule";
import { TgBot } from "./platforms/tg.js";
import { VkBot } from "./platforms/vk.js";

// –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª-–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if (process.argv.length - 2 < 1) {
    console.error(`—Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∑–∞–ø—É—Å–∫–∞:\nnode launcher.js your_config.json`);

    process.exit(1);
}

// –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const rawconfig = await readFile(process.argv[2 + 0], { encoding: 'utf-8' });
const config = JSON.parse(rawconfig) as config;
console.log(`--conf desc: ${config.description}`);

// –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const logger = await Logger.make(
    config.logger.tgbot_token,
    config.logger.chat_id,
    config.logger.msgdump_file,
)

const schapi = new SchApi(config.api_address)
const db = new DB(config.pg_connection_string, logger)
const msgAnalyser = new MsgAnalyser()
const bot = new Bot(msgAnalyser, schapi, db, logger)

const tgbot = new TgBot(config.tg.token, db.pool)
const vkbot = new VkBot(config.vk.token, config.vk.group_id, db.pool)

const sendFuncs = {
    'tg': tgbot.mailingSend.bind(tgbot),
    'vk': vkbot.mailingSend.bind(vkbot),
}

// —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —Ä–∞—Å—Å—ã–ª–∫–∏
scheduleJob('0 7 * 1-6,9-12 1-6', async () => {
    try {
        await bot.startMailing(sendFuncs, new Date(), 'üìï –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
    } catch (e) {
        console.error(e)
        logger.logToChat('–±–æ—Ç. —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–µ–≥–æ–¥–Ω—è', e)
    }
});
scheduleJob('0 19 * 1-6,9-12 0-5', async () => {
    try {
        const date = new Date()
        date.setDate(date.getDate() + 1)

        await bot.startMailing(sendFuncs, date, 'üìó –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
    } catch (e) {
        console.error(e)
        logger.logToChat('–±–æ—Ç. —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–ª –¥–µ–Ω—å', e)
    }
});

// @ts-ignore
await bot.router({ text: '–∑–≤–æ–Ω–∫–∏ —Ä–∞–¥–∏ –ø–æ–¥–æ–≥—Ä–µ—Ç—å —Ä–æ—É—Ç–µ—Ä', from: 'admin' }, async () => 'my bad')

// –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
tgbot.start(bot.router.bind(bot), config.skip_startup_burst)
vkbot.start(bot.router.bind(bot), config.skip_startup_burst)

type config = {
    /** –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ */
    description: string,
    /** –∞–¥—Ä–µ—Å –∞–ø–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è */
    api_address: string,
    /** URI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ */
    pg_connection_string: string,
    /** –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –≤ –±–æ—Ç–∞—Ö –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ? */
    skip_startup_burst: boolean,

    /** —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–≥ –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */
    tg: {
        /** —Ç–æ–∫–µ–Ω —Ç–≥ –±–æ—Ç–∞ */
        token: string,
    },
    /** —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –≤–∫ –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */
    vk: {
        /** —Ç–æ–∫–µ–Ω –≤–∫ –±–æ—Ç–∞ */
        token: string,
        /** id —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –æ—Ç –ª–∏—Ü–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç */
        group_id: number,
    },

    /** –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞ */
    logger: {
        /** —Ç–æ–∫–µ–Ω —Ç–≥ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ */
        tgbot_token: string,
        /** id —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ */
        chat_id: number,
        /** —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ */
        msgdump_file: string,
    },
};
