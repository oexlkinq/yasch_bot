import { Day, Pair } from "../api.js";

export class Formatter {
    static formatDays(days: Day[], presetIndex = 0) {
        if (days.length === 0) {
            return '‚ùå –ü–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
        }

        let text = '';

        for (const day of days) {
            text += `üìç ${this.formatDate(day.date)}:\n${this.formatPairs(day.pairs, presetIndex)}\n`
        }

        return text;
    }

    static formatPairs(pairs: Pair[], presetIndex = 0) {
        if (pairs.length === 0) {
            return '‚ùå –ü–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n';
        }

        const preset = this.presets[presetIndex]

        let text = ''
        let expectedNum = 1
        for (const pair of pairs) {
            if (preset.fillGaps) {
                // –¥–æ–±–∞–≤–ª—è—Ç—å –æ–∫–Ω–∞, –ø–æ–∫–∞ —Å—á—ë—Ç—á–∏–∫ –Ω–µ –¥–æ–π–¥—ë—Ç –¥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫ –ø–∞—Ä—ã
                for (; expectedNum < pair.num; expectedNum++) {
                    text += preset.pairTextGenerator({ num: expectedNum, text: '-' }) + '\n'
                }
            }

            text += preset.pairTextGenerator(pair) + '\n'

            expectedNum++
        }

        return text
    }

    static makeTextListOfFormats(selection: number) {
        return Formatter.presets.map((v, i) => {
            let text = `${i + 1}: ${v.description}`;

            if (selection === i) {
                text += ' (—Ç–µ–∫—É—â–∏–π)'
            }

            return text
        }).join('\n')
    }


    /** –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å—Ä 21.07.2024" */
    static formatDate(date: Date) {
        return `${this.localDayNames[date.getDay()]} ${date.toLocaleDateString()}`;
    }

    static localDayNames = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
    static nums = ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£'];

    static presets: Preset[] = [
        {
            description: '–ü–æ-—É–º–æ–ª—á–∞–Ω–∏—é',
            pairTextGenerator: (pair) => `${this.nums[pair.num]} ${pair.text}`,
            fillGaps: false,
        },
        {
            description: '–° –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ–∫–æ–Ω',
            pairTextGenerator: (pair) => `${this.nums[pair.num]} ${pair.text}`,
            fillGaps: true,
        },
        {
            description: '–†–∞–Ω–Ω–∏–π',
            pairTextGenerator: (pair) => `üîò ${pair.num}: ${pair.text}`,
            fillGaps: false,
        },
    ];
}

type Preset = {
    description: string,
    pairTextGenerator: (pair: Pair) => string,
    fillGaps: boolean,
};
