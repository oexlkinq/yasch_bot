import TelegramBot from "node-telegram-bot-api";
import { DB, dbUser, User } from "../db.js";
import { scheduleJob } from "node-schedule";
import { Formatter } from "./formatter.js";
import { actionsInfo, MsgAnalyser } from "./msgAnalyser/index.js";
import { texts } from "./texts.js";
import { pairsGetDateOptions, pairsGetTargetOptions, SchApi } from "./api.js";
import { Monday } from "../utils/monday.js";
import Bottleneck from 'bottleneck'
import { Logger } from "../logger.js";

export class Bot {
	private constructor(
		public tgbot: TelegramBot,
		public msgAnalyser: MsgAnalyser,
		public schapi: SchApi,
		public db: DB,
		public logger: Logger,
		public limiter: Bottleneck,
	) { }

	static async make(db: DB, schapi: SchApi, token: string, logger: Logger) {
		const tgbot = new TelegramBot(token)
		const msgAnalyser = new MsgAnalyser()
		const limiter = new Bottleneck({
			maxConcurrent: 30,
			reservoir: 30,
			reservoirRefreshAmount: 30,
			reservoirRefreshInterval: 1000,
		})

		return new Bot(tgbot, msgAnalyser, schapi, db, logger, limiter)
	}

	async start(skipStartupBurst = true) {
		// –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
		if (skipStartupBurst) {
			console.log('skip burst...');

			const updates = await this.tgbot.getUpdates({
				offset: -100,
				allowed_updates: ['message'],
			})

			updates.map(update => {
				const msg = update.message
				if (!msg) {
					return
				}

				console.log(`${msg.from?.username ?? msg.from?.first_name ?? '__nobody__'}: ${msg.text ?? '__nothing__'}`)
			})
		}

		// –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
		console.log('update commands...');
		await this.tgbot.setMyCommands([
			{
				command: 'start',
				description: '–ö–æ—Ä–æ—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ + –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏',
			}
		])

		// —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —Ä–∞—Å—Å—ã–ª–∫–∏
		scheduleJob('0 7 * 1-6,9-12 1-6', async () => {
			try {
				await this.startMailing(new Date(), 'üìï –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
			} catch (e) {
				console.error(e)
				this.logger.logToChat('–±–æ—Ç. —Ä–∞—Å—Å—ã–ª–∫–∞', e)
			}
		});
		scheduleJob('0 19 * 1-6,9-12 0-5', async () => {
			try {
				const date = new Date()
				date.setDate(date.getDate() + 1)

				await this.startMailing(date, 'üìó –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
			} catch (e) {
				console.error(e)
				this.logger.logToChat('–±–æ—Ç. —Ä–∞—Å—Å—ã–ª–∫–∞', e)
			}
		});

		// –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
		this.tgbot.on('message', this.router.bind(this));

		// –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
		console.log('start polling...');
		return this.tgbot.startPolling({
			polling: true,
		})
	}

	async router(msg: TelegramBot.Message) {
		if (!msg.text) {
			return
		}

		const send = (text: string, options?: TelegramBot.SendMessageOptions) => {
			this.logger.dumpMsg(msg, text)

			return this.limiter.schedule(
				() => this.tgbot.sendMessage(
					msg.chat.id,
					text,
					Object.assign({ reply_markup: Bot.defaultKeyboard } as TelegramBot.SendMessageOptions, options),
				),
			)
		}

		try {
			let user: User | undefined
			const getUser = async () => user ?? (user = await User.make(this.db.pool, msg.chat.id))

			if (msg.text.startsWith('/start')) {
				return send(texts.shortHelp)
			}

			const analyseRes = this.msgAnalyser.analyse(msg.text)
			if (!analyseRes) {
				return await send('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É')
			}

			let text = ''
			if (!analyseRes.allUsed) {
				text += `‚ÑπÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${analyseRes.chunks.filter(item => item.used).map(item => item.text).join(' ')}\n\n`
			}

			let handlerReturn: string
			switch (analyseRes.action) {
				case "cmd":
					handlerReturn = await this.cmdHandler(analyseRes.info as actionsInfo['cmd'], getUser)
					break

				case "sub":
					handlerReturn = await this.subHandler(analyseRes.info as actionsInfo['sub'], getUser)
					break

				case "search":
					handlerReturn = await this.searchHandler(analyseRes.info as actionsInfo['search'], getUser)
					break

				case "feedback":
					const { text } = analyseRes.info as actionsInfo['feedback']
					handlerReturn = await this.feedbackHandler(text, msg.from)
					break
			}

			text += handlerReturn

			await send(text)
		} catch (e) {
			await send('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')

			console.error(e)
			this.logger.logToChat('–±–æ—Ç. –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', e)
		}
	}

	async cmdHandler(info: actionsInfo['cmd'], getUser: getUser): Promise<string> {
		switch (info.cmd) {
			case "bells":
				return texts.bells

			case "help":
				return texts.largeHelp

			case "format":
				const newFormat = await (await getUser()).switchFormat()
				return '‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç –æ–±–Ω–æ–≤–ª—ë–Ω\n–°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n' + Formatter.makeTextListOfFormats(newFormat)

			case "mute":
				const newState = await (await getUser()).toggleMute()
				return '‚ÑπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ ' + ((newState) ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞')

			case "optout":
				await (await getUser()).wipe()
				return '‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã'

			case "stats":
				const updates = await this.schapi.updatesGet(new Monday())
				return '‚ÑπÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤: ' + updates.map(item => item.faculty_short).join(', ')
		}
	}

	async subHandler(info: actionsInfo['sub'], getUser: getUser): Promise<string> {
		if (!info.target) {
			return '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã (–ø—Ä–∏–º–µ—Ä—ã –≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: 430–±, 1-23–º, 123—Å, 123–±-–∞) –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–ø—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: –ø–æ–¥–ø–∏—à–∏ –ø–æ–∏—Å–∫ –∏–≤–∞–Ω–æ–≤)'
		}
		const { target } = info

		const user = await getUser()

		switch (target.type) {
			case "group":
				const { available } = await this.schapi.groupsTest(target.value)

				await user.setGroup(target.value)
				return ((available) ? '' : '‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã —Ä–∞–Ω–µ–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–æ—Å—å\n\n') + makeText(user)

			case "query":
				await user.setQuery(target.value)
				return makeText(user)
		}

		function makeText(user: User) {
			const group = user.group_name ?? '-'
			const query = user.query ?? '-'
			return `‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–ì—Ä—É–ø–ø–∞: ${group}\n–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ${query}`
		}
	}

	async searchHandler(info: actionsInfo['search'], getUser: getUser): Promise<string> {
		let targets = {
			group: undefined as string | undefined,
			query: undefined as string | undefined,
		}

		if (info.target) {
			targets[info.target.type] = info.target.value
		}

		let text = ''
		if (targets.query?.match(MsgAnalyser.groupRegexp)) {
			text += '‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –≤—ã –∏—â–µ—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã. –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–æ –±–µ–∑ —Å–ª–æ–≤–∞ "–ø–æ–∏—Å–∫"\n\n'
		}

		const user = await getUser()

		// –µ—Å–ª–∏ —Ü–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –±—ã–ª–∞ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–∞
		if (!(targets.group || targets.query)) {
			// –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫ —Ç–∞–∫–∂–µ –Ω–µ—Ç
			if (!(user.group_name || user.query)) {
				return '‚ö†Ô∏è –ù–µ—Ç —Ü–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–∞. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å (–≥—Ä—É–ø–ø—É –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å), –ª–∏–±–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É'
			}

			targets.group = user.group_name
			targets.query = user.query
		}

		const dateOptions: pairsGetDateOptions = {
			date: info.date,
			week: info.week,
		}

		const makeResponse = async (title: string, targetOptions: pairsGetTargetOptions) => {
			let text = `üìå ${title}\n\n`

			const days = await this.schapi.pairsGet(Object.assign(targetOptions, dateOptions))

			return text + Formatter.formatDays(days, user.format) + '\n'
		}

		// –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ –≥—Ä—É–ø–ø–µ
		if (targets.group) {
			text += await makeResponse(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã ${targets.group}`, { groupName: targets.group })
		}

		// –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
		if (targets.query) {
			text += await makeResponse(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${targets.query}"`, { query: targets.query })
		}

		return text
	}

	async feedbackHandler(text: string, from?: TelegramBot.User): Promise<string> {
		this.logger.logToChat(`–æ—Ç–∑—ã–≤ –æ—Ç ${(from?.username) ? '@' + from.username : from?.first_name ?? '__nobody__'}\n${text}`)

		return '‚ÑπÔ∏è –û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
	}

	async startMailing(date: Date, title: string) {
		// –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞
		const users = await User.getAllSubs(this.db.pool)

		// –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		const subsOfGroup = new Map<string, dbUser[]>()
		const subsOfQuery = new Map<string, dbUser[]>()

		for (const user of users) {
			if (user.group_name) {
				const groupSub = subsOfGroup.get(user.group_name)
				if (groupSub) {
					groupSub.push(user)
				} else {
					subsOfGroup.set(user.group_name, [user])
				}
			}

			if (user.query) {
				const querySub = subsOfQuery.get(user.query)
				if (querySub) {
					querySub.push(user)
				} else {
					subsOfQuery.set(user.query, [user])
				}
			}
		}

		// –∑–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–æ–¥–ø–∏—Å–∫–∞–º
		const pairsOfAllSubs = await this.schapi.pairsBulkGet(
			date,
			{
				groupName: Array.from(subsOfGroup.keys()),
				query: Array.from(subsOfQuery.keys()),
			},
		)

		// –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
		const defferedMessages = new Map<number, string>()
		const tasks: Promise<any>[] = []
		const errors: unknown[] = []
		const limiter = new Bottleneck({
			maxConcurrent: 20,
			reservoir: 20,
			reservoirRefreshAmount: 20,
			reservoirRefreshInterval: 1000,
		})
		limiter.on('error', (e) => {
			console.error(e)
			this.logger.logToChat('–±–æ—Ç. —Ä–∞—Å—Å—ã–ª–∫–∞. —Å–æ–±—ã—Ç–∏–µ error –≤ limiter', e)
		})

		const limitedSend = limiter.wrap(async (user_id: number, text: string) => {
			try {
				await this.tgbot.sendMessage(user_id, text)
			} catch (e) {
				// https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#error-handling
				if (e instanceof Object && 'code' in e && e.code === 'ETELEGRAM') {
					// @ts-ignore TODO
					const error_code = e.response?.body?.error_code
					if ([400, 403].includes(error_code)) {
						console.warn(`user ${user_id} was dropped`)
						User.drop(this.db.pool, user_id).catch(e => {
							console.error(e)
							this.logger.logToChat('–±–æ—Ç. —Ä–∞—Å—Å—ã–ª–∫–∞. —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', e)
						})

						return
					}
				}

				errors.push(e)
			}
		})

		for (const [group, pairs] of pairsOfAllSubs.groupName) {
			if(pairs.length === 0){
				continue
			}

			const users = subsOfGroup.get(group) ?? []

			const cacheByFormat = new Array<string>(Formatter.presets.length)
			for (const user of users) {
				let text = cacheByFormat[user.format]
				if (!text) {
					text = `${title}\n\nüìå –ì—Ä—É–ø–ø–∞ ${group}:\n${Formatter.formatPairs(pairs, user.format)}`
					cacheByFormat[user.format] = text
				}

				// –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫, —Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
				if (user.query) {
					defferedMessages.set(user.id, text)
				} else {
					// –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –∂–µ
					tasks.push(limitedSend(user.id, text))
				}
			}
		}

		for (const [query, pairs] of pairsOfAllSubs.query) {
			const users = subsOfQuery.get(query) ?? []

			if(pairs.length === 0){
				for(const user of users){
					const text = defferedMessages.get(user.id)

					if(text){
						tasks.push(limitedSend(user.id, text))
					}
				}

				continue
			}

			const cacheByFormat = new Array<string>(Formatter.presets.length)
			for (const user of users) {
				let text = cacheByFormat[user.format]
				if (!text) {
					text = `üìå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ "${query}":\n${Formatter.formatPairs(pairs, user.format)}`
					cacheByFormat[user.format] = text
				}

				const stMsgPart = defferedMessages.get(user.id)
				if (stMsgPart) {
					text = `${stMsgPart}\n${text}`
				} else {
					text = `${title}\n\n${text}`
				}

				tasks.push(limitedSend(user.id, text))
			}
		}

		await Promise.allSettled(tasks)
		await limiter.stop()
		errors.forEach(error => console.error(error))
		if(errors.length > 0){
			this.logger.logToChat('–±–æ—Ç. —Ä–∞—Å—Å—ã–ª–∫–∞. –∫–æ–ª-–≤–æ –æ—à–∏–±–æ–∫: ' + errors.length)
		}
	}

	static defaultKeyboard: TelegramBot.ReplyKeyboardMarkup = {
		keyboard: [
			[
				{ text: '–°–µ–≥–æ–¥–Ω—è' },
				{ text: '–ó–∞–≤—Ç—Ä–∞' },
				{ text: '–ù–µ–¥–µ–ª—è' },
			],
			[
				{ text: '–°–ø—Ä–∞–≤–∫–∞' },
				{ text: '–ó–≤–æ–Ω–∫–∏' },
				{ text: '–§–∞–π–ª—ã' },
			],
		],
		resize_keyboard: true,
		is_persistent: true,
	};
}

type getUser = () => Promise<User>
